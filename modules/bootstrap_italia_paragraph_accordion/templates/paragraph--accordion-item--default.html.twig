{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{%
  set classes = [
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    not paragraph.isPublished() ? 'paragraph--unpublished'
  ]
%}
{% set title_id = paragraph.bundle() ~ '--' ~ paragraph.id() %}
{% set item_show = content.field_accordion_item_show[0]['#markup']|render == 'True' ? true : false %}
{% set always_open = content.field_accordion_item_always_open[0]['#markup']|render == 'True' ? true : false %}

{% block paragraph %}
  <div class="accordion-item">
    <h2 class="accordion-header" id="heading-{{ title_id }}">
      <button
        class="accordion-button{{ item_show ? '' : ' collapsed' }}"
        type="button"
        data-bs-toggle="collapse"
        data-bs-target="#collapse-{{ title_id }}"
        aria-expanded="{{ item_show ? 'true' : 'false' }}"
        aria-controls="collapse-{{ title_id }}">
        {{ content.field_title }}
      </button>
    </h2>
    <div id="collapse-{{ title_id }}"
         class="accordion-collapse collapse{{ item_show ? ' show' : '' }}"
         aria-labelledby="heading-{{ title_id }}"
         {% if always_open %}
           data-bs-parent="#accordion-{{ paragraph.getParentEntity().id() }}"
         {% endif %}
    >
      <div class="accordion-body">
        <div{{ attributes.addClass(classes) }}>
          {% block content %}
            {{ content|without('field_title','field_accordion_item_show','field_accordion_item_always_open') }}
          {% endblock %}
        </div>
      </div>
    </div>
  </div>
{% endblock paragraph %}
